"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import raven
import environ
from pathlib import Path

from raven.exceptions import InvalidGitRepository
from .summernote_settings import *
from .logging import *

ROOT_DIR = environ.Path(__file__) - 4
BASE_DIR = ROOT_DIR.path("backend")


env = environ.Env()
env.read_env(".env")

SECRET_KEY = env.str("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_filters",
    "rest_framework",
    "raven.contrib.django.raven_compat",
    "django_cleanup.apps.CleanupConfig",
    "captcha",
    "crispy_forms",
    "django_summernote",
    "tempus_dominus",  # DateTimeWidget
    "ordered_model",
    "django_select2",
]

PROJECT_APPS = [
    "pages",
    "agenda",
    "points",
]

INSTALLED_APPS = PROJECT_APPS + INSTALLED_APPS

DEFAULT_LOGGING_DIR = ROOT_DIR("volumes", "logs")
LOGGING_DIR = env.str("LOGGING_DIR", default=DEFAULT_LOGGING_DIR)
LOGGING_LEVEL = env.str("LOGGING_LEVEL", default="DEBUG")

ConfigureLogger(
    log_level=LOGGING_LEVEL, logging_dir=LOGGING_DIR, django_modules=PROJECT_APPS
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "config.middleware.XRealIPMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ADMIN_URL = env.str("ADMIN_URL", default="admin")
ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR("templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.static",
                "pages.context_processors.sponsors_carousel_processor",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database

DATABASES = {"default": env.db("DATABASE_URL")}
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)

# Cache

USE_CACHE = env.bool("USE_CACHE", default=False)

CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}

if USE_CACHE:
    CACHES["default"] = {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("CACHE_REDIS_URL", default="redis://redis:6379/1"),
        "TIMEOUT": 3600,
        "CACHE_MIDDLEWARE_SECONDS": None,
        "OPTIONS": {"MAX_ENTRIES": 5192},
    }

CACHALOT_ENABLED = USE_CACHE


# Password validation

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization

# LANGUAGE_CODE = 'en-EN'

TIME_ZONE = "Europe/Warsaw"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (BASE_DIR("locale"),)

"""
Django static collects files that are:
- in the application's static directory
- in the directories listed by STATICFILES_DIRS
"""
# Static files (CSS, JavaScript, Images)

DEFAULT_STATIC_ROOT = ROOT_DIR("volumes", "static")
STATIC_ROOT = env.str("STATIC_ROOT", default=DEFAULT_STATIC_ROOT)
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR("commons")]

# Media files

DEFAULT_MEDIA_ROOT = ROOT_DIR("volumes", "media")
MEDIA_ROOT = env.str("MEDIA_ROOT", default=DEFAULT_MEDIA_ROOT)
MEDIA_URL = "/media/"


# SHELL: usage ./manage.py shell_plus
SHELL_PLUS = "ipython"
INTERNAL_IPS = [
    "127.0.0.1",
]

RAVEN_CONFIG = {
    "dsn": None,
    "environment": None,
}
try:
    RAVEN_CONFIG["release"] = raven.fetch_git_sha(BASE_DIR)
except InvalidGitRepository:
    RAVEN_CONFIG["release"] = "unknown"

CRISPY_TEMPLATE_PACK = "bootstrap4"

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# User can get next email after 15minutes.
RATE_MESSAGES_MINUTES = 15

# Check MX record when user gives an email
ENABLE_MX_CHECK = True

RECAPTCHA_PUBLIC_KEY = "6LdqtLIUAAAAANNGKJsg5MrrJE8PmkErDP8ET0-V"
RECAPTCHA_PRIVATE_KEY = "6LdqtLIUAAAAAA76qjs-VyHlgZZpQfXeuDBA2dLX"

MAXIMUM_FILE_SIZE = (1024**2) * 5  # 5Megabytes(MB)

DEFAULT_FROM_EMAIL = "noreply@localhost"

TEMPUS_DOMINUS_LOCALIZE = True

# BLECH SETTINGS

BLEACH_ALLOWED_TAGS = [
    "b",
    "strong",
    "strike",
    "sub",
    "sup",
    "u",
    "a",
    "span",
    "p",
    "em",
    "blockquote",
    "i",
    "img",
    "video",
    "ul",
    "li",
    "ol",
    "del",
    "br",
    "hr",
    "div",
    "article",
    "section",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "table",
    "td",
    "th",
    "tr",
    "tbody",
    "thead",
    "object",
    "button",
    "iframe",
    "embed",
]

BLEACH_ALLOWED_ATTRIBUTES = {
    "*": ["class", "style"],
    "a": ["href", "title", "target"],
    "abbr": ["title"],
    "acronym": ["title"],
    "object": ["data", "type", "width", "height"],
    "embed": ["src", "type", "width", "height"],
    "img": ["src", "alt"],
    "iframe": ["frameborder", "src", "width", "height"],
}

BLEACH_ALLOWED_STYLES = [
    "color",
    "background-color",
    "font-weight",
    "text-align",
    "font-size",
    "font-family",
    "text-transform",
    "line-height",
    "padding",
    "margin",
    "margin-left",
    "padding-left",
    "margin-right",
    "padding-right",
    "margin-top",
    "padding-top",
    "margin-bottom",
    "padding-bottom",
    "background",
    "background-image",
    "width",
    "min-width",
    "max-width",
    "height",
    "max-height",
    "min-height",
]

# if we want to accept '//www' we have to append the 'http' protocol to allowed_protocols
BLEACH_ALLOWED_PROTOCOLS = ["https", "mailto", "tel", "http"]
